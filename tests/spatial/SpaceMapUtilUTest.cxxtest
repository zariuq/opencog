#include <cxxtest/TestSuite.h>

#include <cstdlib>
#include <string>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/base/Handle.h>
#include <opencog/spacetime/atom_types.h>
#include <opencog/spatial/3DSpaceMap/OpencogOcTree.h>
#include <opencog/spatial/3DSpaceMap/EntityRecorder.h>
#include <opencog/spatial/3DSpaceMap/SpaceMapUtil.h>
#include <opencog/spatial/3DSpaceMap/Block3DMapUtil.h>
#include <opencog/util/Logger.h>

using namespace std;
using namespace opencog;
using namespace opencog::spatial;

class SpaceMapUtilUTest:public CxxTest::TestSuite
{
public:
    void testGetPredicate_MultipleTargetNodesAndMultiplePredicates_GetPredicates()
    {
        AtomSpace as;
        Handle targetBlock1 = as.add_node(STRUCTURE_NODE,"block1");
        Handle targetBlock2 = as.add_node(STRUCTURE_NODE,"block2");
        HandleSeq targetBlocks = {targetBlock1, targetBlock2};
        Handle predicateValueNode1 = as.add_node(CONCEPT_NODE, "predval1");
        Handle predicateValueNode2 = as.add_node(CONCEPT_NODE, "predval2");
        Handle predicateValueNode3 = as.add_node(CONCEPT_NODE, "predval3");
        Handle predicateNode = as.add_node(PREDICATE_NODE, "predicate");
        HandleSeq listLinkOutgoings;
        listLinkOutgoings.push_back(targetBlock1);
        listLinkOutgoings.push_back(targetBlock2);
        listLinkOutgoings.push_back(predicateValueNode1);
        listLinkOutgoings.push_back(predicateValueNode2);
        listLinkOutgoings.push_back(predicateValueNode3);
        Handle listLink1 = as.add_link(LIST_LINK, listLinkOutgoings);
        HandleSeq evalLinkOutgoings;
        evalLinkOutgoings.push_back(predicateNode);
        evalLinkOutgoings.push_back(listLink1);
        Handle EvalLink1 = as.add_link(EVALUATION_LINK, evalLinkOutgoings);
        vector<string> predicateValues = getPredicate(as, "predicate", targetBlocks, 3);
        TS_ASSERT_EQUALS("predval1", predicateValues[0]);
        TS_ASSERT_EQUALS("predval2", predicateValues[1]);
        TS_ASSERT_EQUALS("predval3", predicateValues[2]);
    }

    void testGetBoundingBox_CommonUseCase_GetCorrectBox()
    {
        AtomSpace as;
        OpencogOcTree spaceMap("testmap", 1);
        EntityRecorder entityRecorder;

        Handle entity = as.add_node(ENTITY_NODE, "block1");
        //prepare entity location
        BlockVector entityPos(12, 13, 14);
        entityRecorder.addNoneBlockEntity(entity, entityPos, false, false, 123456);
        //prepare entity size
        HandleSeq targetBlocks = {entity};
        Handle length = as.add_node(NUMBER_NODE, "2");
        Handle width = as.add_node(NUMBER_NODE, "3");
        Handle height = as.add_node(NUMBER_NODE, "4");
        Handle predicateNode = as.add_node(PREDICATE_NODE, "size");
        HandleSeq listLinkOutgoings;
        listLinkOutgoings.push_back(entity);
        listLinkOutgoings.push_back(length);
        listLinkOutgoings.push_back(width);
        listLinkOutgoings.push_back(height);
        Handle listLink1 = as.add_link(LIST_LINK, listLinkOutgoings);
        HandleSeq evalLinkOutgoings;
        evalLinkOutgoings.push_back(predicateNode);
        evalLinkOutgoings.push_back(listLink1);
        Handle EvalLink1 = as.add_link(EVALUATION_LINK, evalLinkOutgoings);

        AxisAlignedBox box = getBoundingBox(as, entityRecorder, entity);

        TS_ASSERT_EQUALS(box.nearLeftBottomConer, entityPos);
        TS_ASSERT_EQUALS(box.size_x, 2);
        TS_ASSERT_EQUALS(box.size_y, 3);
        TS_ASSERT_EQUALS(box.size_z, 4);
    }

    void testStandable_NormalBlock_Standable()
    {
        //case1: single block
        AtomSpace as;
        OpencogOcTree spaceMap("testmap", 1);
        spaceMap.setAgentHeight(1);

        BlockVector testpos(1, 2, 4);
        BlockVector blockpos1(1, 2, 3);
        TS_ASSERT(checkStandable(as, spaceMap, testpos) == false);
        Handle testBlock1 = as.add_node(STRUCTURE_NODE, "block1");
        Handle materialNode1 = as.add_node(CONCEPT_NODE, "dirt");
        Handle materialPredNode = as.add_node(PREDICATE_NODE, "material");
        HandleSeq listLinkOutgoings;
        listLinkOutgoings.push_back(testBlock1);
        listLinkOutgoings.push_back(materialNode1);
        Handle listLink1 = as.add_link(LIST_LINK, listLinkOutgoings);
        HandleSeq evalLinkOutgoings;
        evalLinkOutgoings.push_back(materialPredNode);
        evalLinkOutgoings.push_back(listLink1);
        Handle EvalLink1 = as.add_link(EVALUATION_LINK, evalLinkOutgoings);
        spaceMap.addSolidUnitBlock(testBlock1, blockpos1);

        bool standable = checkStandable(as, spaceMap, testpos);

        TS_ASSERT_EQUALS(true, standable);
    }

	
    void testStandable_WaterBlock_Unstandable()
    {
        //case2: single block which is water, cannot stand on water
        AtomSpace as;
        OpencogOcTree spaceMap("testmap", 1);
        spaceMap.setAgentHeight(1);

        BlockVector testpos(1, 2, 4);
        BlockVector blockpos1(1, 2, 3);
        TS_ASSERT(checkStandable(as,spaceMap,testpos) == false);
        Handle testBlock1 = as.add_node(STRUCTURE_NODE, "block1");
        Handle materialNode1 = as.add_node(CONCEPT_NODE, "water");
        Handle materialPredNode = as.add_node(PREDICATE_NODE, "material");
        HandleSeq listLinkOutgoings;
        listLinkOutgoings.push_back(testBlock1);
        listLinkOutgoings.push_back(materialNode1);
        Handle listLink1 = as.add_link(LIST_LINK, listLinkOutgoings);
        HandleSeq evalLinkOutgoings;
        evalLinkOutgoings.push_back(materialPredNode);
        evalLinkOutgoings.push_back(listLink1);
        Handle EvalLink1 = as.add_link(EVALUATION_LINK, evalLinkOutgoings);
        spaceMap.addSolidUnitBlock(testBlock1, blockpos1);
		
        bool standable = checkStandable(as, spaceMap, testpos);

        TS_ASSERT_EQUALS(false, standable);
    }
	
    void testStandable_TwoNearBlock_Unstandable()
    {
        // case3: two block which z coord is close ( distance < agentHeight)
        // so it's not standable
        AtomSpace as;
        OpencogOcTree spaceMap("testmap", 1);
        BlockVector testpos(1, 2, 4);
        // make agent height be 2, higher than distance
        spaceMap.setAgentHeight(2);
		
        TS_ASSERT(checkStandable(as,spaceMap,testpos) == false);
        BlockVector blockpos1(1, 2, 3);
        Handle testBlock1 = as.add_node(STRUCTURE_NODE, "block1");
        Handle materialNode1 = as.add_node(CONCEPT_NODE, "dirt");
        Handle materialPredNode = as.add_node(PREDICATE_NODE, "material");
        HandleSeq listLinkOutgoings1;
        listLinkOutgoings1.push_back(testBlock1);
        listLinkOutgoings1.push_back(materialNode1);
        Handle listLink1 = as.add_link(LIST_LINK, listLinkOutgoings1);
        HandleSeq evalLinkOutgoings1;
        evalLinkOutgoings1.push_back(materialPredNode);
        evalLinkOutgoings1.push_back(listLink1);
        Handle EvalLink1 = as.add_link(EVALUATION_LINK, evalLinkOutgoings1);
		
        spaceMap.addSolidUnitBlock(testBlock1, blockpos1);

        BlockVector blockpos2(1, 2, 5);
        Handle testBlock2 = as.add_node(STRUCTURE_NODE, "block2");
        Handle materialNode2 = as.add_node(CONCEPT_NODE, "dirt");
        HandleSeq listLinkOutgoings2;
        listLinkOutgoings2.push_back(testBlock1);
        listLinkOutgoings2.push_back(materialNode1);
        Handle listLink2 = as.add_link(LIST_LINK, listLinkOutgoings2);
        HandleSeq evalLinkOutgoings2;
        evalLinkOutgoings2.push_back(materialPredNode);
        evalLinkOutgoings2.push_back(listLink2);
        Handle EvalLink2 = as.add_link(EVALUATION_LINK, evalLinkOutgoings2);
        spaceMap.addSolidUnitBlock(testBlock2, blockpos2);

        bool standable = checkStandable(as, spaceMap, testpos);

        TS_ASSERT_EQUALS(false, standable);
    }


	
};
